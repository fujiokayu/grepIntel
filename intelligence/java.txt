[SQL_INJECTION]
description: SQL injection vulnerabilities in Java code
patterns:
- executeQuery\s*\(\s*.*\+.*\)
- executeUpdate\s*\(\s*.*\+.*\)
- execute\s*\(\s*.*\+.*\)
- prepareStatement\s*\(\s*.*\+.*\)
- createStatement\s*\(\s*.*\+.*\)
- DriverManager\.getConnection\s*\(\s*.*\+.*\)

[XSS]
description: Cross-site scripting vulnerabilities
patterns:
- response\.getWriter\(\)\.print\s*\(\s*.*request\.getParameter.*\)
- response\.getWriter\(\)\.println\s*\(\s*.*request\.getParameter.*\)
- out\.print\s*\(\s*.*request\.getParameter.*\)
- out\.println\s*\(\s*.*request\.getParameter.*\)
- response\.getWriter\(\)\.write\s*\(\s*.*request\.getParameter.*\)

[CSRF]
description: Cross-site request forgery vulnerabilities
patterns:
- !request\.getSession\(\)\.getAttribute\s*\(\s*["']csrf_token["']\s*\)
- !request\.getParameter\s*\(\s*["']csrf_token["']\s*\)\.equals\s*\(\s*request\.getSession\(\)\.getAttribute\s*\(\s*["']csrf_token["']\s*\)\s*\)

[COMMAND_INJECTION]
description: Command injection vulnerabilities
patterns:
- Runtime\.getRuntime\(\)\.exec\s*\(\s*.*\+.*\)
- ProcessBuilder\s*\(\s*.*\+.*\)
- new\s+ProcessBuilder\s*\(\s*.*\+.*\)

[PATH_TRAVERSAL]
description: Path traversal vulnerabilities
patterns:
- new\s+File\s*\(\s*.*request\.getParameter.*\)
- new\s+FileInputStream\s*\(\s*.*request\.getParameter.*\)
- new\s+FileOutputStream\s*\(\s*.*request\.getParameter.*\)
- new\s+FileReader\s*\(\s*.*request\.getParameter.*\)
- new\s+FileWriter\s*\(\s*.*request\.getParameter.*\)

[INSECURE_DESERIALIZATION]
description: Insecure deserialization vulnerabilities
patterns:
- new\s+ObjectInputStream\s*\(\s*.*\)
- readObject\s*\(\s*\)
- XMLDecoder\s*\(\s*.*\)

[AUTHENTICATION_FLAWS]
description: Authentication vulnerabilities
patterns:
- MessageDigest\.getInstance\s*\(\s*["']MD5["']\s*\)
- MessageDigest\.getInstance\s*\(\s*["']SHA-1["']\s*\)
- ["'](?:(?:(?:(?:(?:[01]?\d\d?|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d\d?|2[0-4]\d|25[0-5]))|(?:(?:[\da-fA-F]{1,4}:){7}[\da-fA-F]{1,4})|(?:(?:[\da-fA-F]{1,4}:){6}:[\da-fA-F]{1,4})|(?:(?:[\da-fA-F]{1,4}:){5}:(?:[\da-fA-F]{1,4}:)?[\da-fA-F]{1,4})|(?:(?:[\da-fA-F]{1,4}:){4}:(?:[\da-fA-F]{1,4}:){0,2}[\da-fA-F]{1,4})|(?:(?:[\da-fA-F]{1,4}:){3}:(?:[\da-fA-F]{1,4}:){0,3}[\da-fA-F]{1,4})|(?:(?:[\da-fA-F]{1,4}:){2}:(?:[\da-fA-F]{1,4}:){0,4}[\da-fA-F]{1,4})|(?:(?:[\da-fA-F]{1,4}:){6}(?:(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?))\.){3}(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)))|(?:(?:[\da-fA-F]{1,4}:){0,5}:(?:(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?))\.){3}(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)))|(?:::(?:[\da-fA-F]{1,4}:){0,5}(?:(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?))\.){3}(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)))|(?:[\da-fA-F]{1,4}::(?:[\da-fA-F]{1,4}:){0,5}[\da-fA-F]{1,4})|(?:::(?:[\da-fA-F]{1,4}:){0,6}[\da-fA-F]{1,4})|(?:(?:[\da-fA-F]{1,4}:){1,7}:))(?:\/[0-9a-zA-Z]{1,})?|(?:(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6})|(?:localhost)|(?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))(?::[0-9]{1,5})?)(?:\/[^\s]*)?["']

[SENSITIVE_DATA_EXPOSURE]
description: Sensitive data exposure vulnerabilities
patterns:
- System\.out\.print\s*\(\s*.*password.*\)
- System\.out\.println\s*\(\s*.*password.*\)
- System\.err\.print\s*\(\s*.*password.*\)
- System\.err\.println\s*\(\s*.*password.*\)
- log\s*\(\s*.*password.*\)
- logger\s*\.\s*info\s*\(\s*.*password.*\)
- logger\s*\.\s*debug\s*\(\s*.*password.*\)
- logger\s*\.\s*warn\s*\(\s*.*password.*\)
- logger\s*\.\s*error\s*\(\s*.*password.*\)
