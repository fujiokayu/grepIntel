[SQL_INJECTION]
description: SQL injection vulnerabilities in PHP code
patterns:
- mysql_query\s*\(\s*.*\$.*\)
- mysqli_query\s*\(\s*.*\$.*\)
- \$.*\s*=\s*.*\$_GET.*
- \$.*\s*=\s*.*\$_POST.*
- execute\s*\(\s*.*\$.*\)
- query\s*\(\s*.*\$.*\)

[XSS]
description: Cross-site scripting vulnerabilities
patterns:
- echo\s+.*\$_GET
- echo\s+.*\$_POST
- print\s+.*\$_REQUEST
- echo\s+.*\$_COOKIE
- print_r\s*\(\s*\$_GET
- print_r\s*\(\s*\$_POST
- print_r\s*\(\s*\$_REQUEST

[CSRF]
description: Cross-site request forgery vulnerabilities
patterns:
- !isset\s*\(\s*\$_SESSION\[['"]csrf_token['"]\]\s*\)
- !hash_equals\s*\(\s*\$_SESSION\[['"]csrf_token['"]\]\s*,\s*\$_POST\[['"]csrf_token['"]\]\s*\)

[COMMAND_INJECTION]
description: Command injection vulnerabilities
patterns:
- exec\s*\(\s*.*\$.*\)
- system\s*\(\s*.*\$.*\)
- passthru\s*\(\s*.*\$.*\)
- shell_exec\s*\(\s*.*\$.*\)
- popen\s*\(\s*.*\$.*\)
- proc_open\s*\(\s*.*\$.*\)
- pcntl_exec\s*\(\s*.*\$.*\)

[PATH_TRAVERSAL]
description: Path traversal vulnerabilities
patterns:
- file_get_contents\s*\(\s*.*\$.*\)
- fopen\s*\(\s*.*\$.*\)
- include\s*\(\s*.*\$.*\)
- include_once\s*\(\s*.*\$.*\)
- require\s*\(\s*.*\$.*\)
- require_once\s*\(\s*.*\$.*\)

[INSECURE_DESERIALIZATION]
description: Insecure deserialization vulnerabilities
patterns:
- unserialize\s*\(\s*.*\$.*\)
- yaml_parse\s*\(\s*.*\$.*\)

[AUTHENTICATION_FLAWS]
description: Authentication vulnerabilities
patterns:
- md5\s*\(\s*.*password.*\)
- sha1\s*\(\s*.*password.*\)
- password_hash\s*\(\s*.*\$.*\s*,\s*PASSWORD_DEFAULT\s*,\s*\[['"]cost['"]\s*=>\s*[1-9]\s*\]\)

[SENSITIVE_DATA_EXPOSURE]
description: Sensitive data exposure vulnerabilities
patterns:
- var_dump\s*\(\s*.*\$.*\)
- print_r\s*\(\s*.*\$.*\)
- error_log\s*\(\s*.*\$.*\)
